---
import { visit, SKIP } from "unist-util-visit";
import { fromHtmlIsomorphic } from "hast-util-from-html-isomorphic";
import { toHtml } from "hast-util-to-html";
import type { Element } from "hast";
import {
  isTextElement,
  getElementInnerText,
} from "rosey-connector/helpers/text-formatters.ts";
import { generateRoseyMarkdownID } from "rosey-connector/helpers/component-helpers.js";
import markdownIt from "markdown-it";
const md = markdownIt();

// Block level elements to add tags to - inline elements should not have tag added
const textElementTagNames = ["p", "li", "h1", "h2", "h3", "h4", "h5", "h6"];

const { content } = Astro.props;
const HtmlTextContent = content ? md.render(content) : "";
const hastTree = fromHtmlIsomorphic(HtmlTextContent, { fragment: true });
visit(hastTree, (node, index, parent) => {
  if (node.type !== "element") {
    return;
  }
  const element = node as Element;
  // Combine all the childrens values if text is in them (for the id)
  if (!isTextElement(element, textElementTagNames)) {
    return;
  }
  const elementInnerText = getElementInnerText(element);
  element.properties["data-rosey"] = generateRoseyMarkdownID(elementInnerText);
  // Skip any children that might accidentally get a nested tag
  return SKIP;
});
const taggedHtml = toHtml(hastTree);
---

<div class="markdown-text" set:html={taggedHtml} />
